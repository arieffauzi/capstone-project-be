// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Students {
  id        Int        @id @default(autoincrement())
  name      String
  username  String     @unique
  password  String
  role_id   Int?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  PostTest  PostTest[]
}

model Teachers {
  id        Int        @id @default(autoincrement())
  name      String
  username  String     @unique
  password  String
  role_id   Int?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  PostTest  PostTest[]
}

model Subjects {
  id        Int        @id @default(autoincrement())
  name      String
  lesson    String
  question  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  PostTest  PostTest[]
}

model PostTest {
  id         Int      @id @default(autoincrement())
  subject    Subjects @relation(fields: [subject_id], references: [id])
  subject_id Int
  siswa      Students @relation(fields: [student_id], references: [id])
  student_id Int
  score      String
  teacher    Teachers @relation(fields: [scored_by], references: [id])
  scored_by  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Role {
  id             Int              @id @default(autoincrement())
  name           String
  RolePermission RolePermission[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Permission {
  id             Int              @id @default(autoincrement())
  name           String
  RolePermission RolePermission[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model RolePermission {
  id            Int        @id @default(autoincrement())
  role          Role       @relation(fields: [role_id], references: [id])
  role_id       Int
  permission    Permission @relation(fields: [permission_id], references: [id])
  permission_id Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}
